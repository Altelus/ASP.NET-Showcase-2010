Note: At the end of the document is a discussion of the various techniques,
      a short evaluation of the goods and bads, and also a small enhancement
      to the Bubble-Sort algorithm called Back-Track (in C).
                - Amit Margalit (9-MAY-1992)

Information

By definition, sort routines place un-ordered numeric or string data into
ascending or descending order. Many sort algorithms have been discovered,
and delineating their characteristics is a favorite pastime of Pascal
tutorials.

Bubble Sort

The bubble sort algorithm derives its name from the way it systematically
floats the largest values in an array to the top, like bubbles in a bottle
of soda.

The algorithm goes like this: starting at the bottom of the array, compare
each adjacent pair of values; if the lower member of the pair is greater
than the upper member, swap. Once you've worked your way to the top in this
fashion, theArray[ARRAYSIZE] is known to be the largest number in the
array. Now repeat the process, but this time stop one element short of the
top (since we already know this value is the largest). Repeat this process
until finally on the last pass you examine only the bottom two members of
the array.


Insertion Sort

The insertion sort is on the simple end of the scale, and resembles the way
people sort a bridge hand. Working from one end of the array to the other,
each value is placed in its correct position relative to the values that
have already been sorted.

The routines shown here are designed to process arrays of integers into
ascending order (i.e., theArray[1] gets the lowest value;
theArray[ARRAYSIZE] gets the highest), although with only trivial changes
the algorithms could easily work with string data and/or descending order.


Shell Sort

The Shell Sort was invented by a computer scientist named Donald Shell.  His
sorting method compares and swaps numbers the greatest distance from each
other first, shrinking the distance between numbers until you return to the
ones in closest proximity to each other.


Quicksort

King of the sorting algorithms is Quicksort. The gist of Quicksort is
summarized here (in general it is a recursive algorithm):

-- Pick a pivot point in the center of the array

-- Partition the array:
   Exchange equal or larger elements (working from the left) with equal or
   smaller elements (working from the right). Repeat this process until the
   array has been organized such that every value left of the pivot point is
   smaller than every value right of the pivot point, and the value at the
   pivot point itself is in exactly the right position.

-- If there's more than one element left of the pivot point,
   call Quicksort recursively on the left-hand part of the array

-- If there's more than one element right of the pivot point,
   call Quicksort recursively on the right-hand part of the array


------------------------------------------------------------------------------
Following are a few additions by Amit Margalit
------------------------------------------------------------------------------

BackTrack - An enhancement of the Bubble-Sort.

The idea of BackTrack is simple: You run only once on the entire array, and
every time you find an element out of place, you search backwards through
the array to find where is the right place for it.


Merge-Sort
----------
Actually, this is the most efficient of all algorithms (where speed is
concerned...). It needs twice as much storage space. Here are the basics:

Note: when you have two already-sorted arrays and you want to merge them into
 a single sorted array, you simply read the first elements, compare them. The
 one that fits to be before the other is sent to the output stream, and a new
 one from its array is read, and the comparison goes on again and again until
 the arrays are merged.

 - Divide the array into 2 separate ones.

 - If the number of elements on the left side is more than one, call
   merge-sort in recursion giving it the left array as an array to sort.

 - Do the same about the right side.

 - When both side have finished and returned, merge the array on the left
   with the one on the right.

Here is a C source (to sort an array of ints):




Comparing the algorithms:
-------------------------

Here is the list of the algorithms included in this article with a short note:

Bubble-Sort     Very inefficient, slow, but very easy to implement.
Back-Track      An improvement of the Bubble Sort.
Insertion-Sort  Also easy to implement, easiest to understand.
Shell-Sort      More efficient, a little hard to understand.
QuickSort       The best. A bit hard to understand and requires a large stack.
Merge-Sort      Always better than QuickSort, but needs twice the memory.

In detail:

BubbleSort
----------
Runs a long time, in little efficiency. Good if you wish to sort a small
number of elements (up to 20 maybe), don't care much about the time it
takes, or don't wanna start writing a more sophisticated sort routine. It's
the simplest one to implement, and has no flow-problems. (i.e. having to
exit from inside a loop or something like that).
 Time of execution: Depends only on length of array.

Back-Track
----------
Just a bit better. Runs only once on the entire array, and swaps things to
their right place. Useful also if you don't wanna start writing a more
sophisticated sort routine, are sorting a small array, and do care little
about the execution time.
 Time of execution: Depends on length of array, and its randomness (the more
                    the array is already sorted, the less it takes).

Insertion-Sort
--------------
Is good if you are sorting a linked-list. You really can't do it many other
ways... You copy the first node of the list to a new location, and read
through the original list, inserting the nodes in proper order to the new
list, by just keeping a temporary copy of the node, setting the appropriate
links of the node in the new list and the node to be inserted correctly.
  Time of execution: Depends on length of array, and the complexity of
                     changing the links in the list.

Shell-Sort
----------
The Shell-Sort use a kind of self-recursion. It runs on the large scale, then
descends into smaller regions of the array. Each time reducing the gap between
the elements it is sorting.

Quick-Sort
----------
Is not simple to implement, but is the most efficient. It is recursive and so
needs a large stack for a large array to be sorted. The idea is to divide the
array into 2 halves, picking the value of the element in the middle as a
pivot-value. Then you go all the way from the left and the right edges, and
swap any values that ought to be on opposite sides. When you get to the
middle point, you check to see if there are more than one elements on each
side, and if there are you call the routine again, sending it the half of the
array as the whole new array for it to sort. This is done in recursion.

Merge-Sort
----------
As has been said before, it needs memory twice the size of the array, to hold
both the array, and the sorted one (for the last pass). Its efficiency is the
best! Its execution time grows only with the growth of the array size, and is
not affected by the level of sortedness of the array preceding the sort.

                                        Amit Margalit, 11-May-1992

